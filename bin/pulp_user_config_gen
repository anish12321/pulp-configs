#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import argparse
from comp_gen import *


parser = argparse.ArgumentParser(
  description='Generate usecase for Pulp system',
  formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("--configs", dest="configs", default=[], action="append", help="Specify path to configurations")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")
parser.add_argument("--template", dest="template", default=None, help="Specify the user template")

args = parser.parse_args()


if args.template is None:
  print ('The path to the template configuration must be given through option --template')
  exit(-1)


os.environ['PULP_CONFIGS_PATH'] = ':'.join(args.configs + os.environ.get('PULP_CONFIGS_PATH').split(':'))

tp = js.import_config_from_file(args.template, find=True)




devices              = tp.get('devices')



system = Component(
)

system.system_tree = Component(
)

system.system_tree.board = Empty_Component(
)

system.system_tree.board.chip = Empty_Component(
)

system.system_tree.board.dpi = Empty_Component(
)

system.system_tree.board.chip.padframe = Empty_Component(
)




if devices is not None:
  for name, dev in devices.get_items().items():
    dev_type = dev.get_child_str('type')
    if dev_type is None:
      raise Exception('The type of the device must be specified with the property "type"')

    if dev_type == "hyper":

      system.system_tree.board.add_component(name, Component(
          includes=[
              "periph/hyper.json"
          ]
      ))

      system.system_tree.board.hyper_clock = Component(
          vp_class= "vp/clock_domain",
          frequency= 50000000
      )

      system.system_tree.board.hyper_clock.out = system.system_tree.board.get(name).clock

      itf = dev.get_child_str('interface')
      if itf is None:
        raise Exception('The interface where the device should be connected must be specified with the property "interface"')

      cs = dev.get_child_int('cs')
      if cs is None:
        cs = 0

      system.system_tree.board.chip.set(itf + '_cs' + str(cs) + '_data', system.system_tree.board.get(name).input)
      system.system_tree.board.chip.set(itf + '_cs' + str(cs), system.system_tree.board.get(name).cs)

    else:
      raise Exception('Unknown device type: ' + dev_type)





config = system.get_json_config()

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')
