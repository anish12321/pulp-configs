#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import argparse
from comp_gen import *


parser = argparse.ArgumentParser(
  description='Generate configuration for Pulp system',
  formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("--system", dest="system", default="pulp", help="Specify the chip")
parser.add_argument("--system-file", dest="system_file", default=None, help="Specify the system JSON file")
parser.add_argument("--configs", dest="configs", default=None, help="Specify path to configurations")
parser.add_argument("--usecase", dest="usecases", action="append", default=[], help="Specify the JSON usecase file")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")

args = parser.parse_args()

system_file = 'system.json'

if args.system_file is not None:
  system_file = args.system_file

if args.system in ["pulpissimo", "pulp", "wolfe"]:

  includes = [
    "defaults.json",
    "chips/%s/%s" % (args.system, system_file),
    "chips/%s/defaults.json" % (args.system)
  ]

else:

  includes=[
    "defaults.json",
    "%s_system.json" % args.system
  ]

includes += args.usecases

system = Component(
    includes=includes
)

config = system.get_json_config(configs=args.configs, expand=True)

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')
