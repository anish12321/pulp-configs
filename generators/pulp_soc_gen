#!/usr/bin/env python3.6

# Authors: Germain Haugou, ETH (germain.haugou@iis.ee.ethz.ch)

 
import json
import json_tools as js
import argparse
from comp_gen import *

parser = argparse.ArgumentParser(
  description='Generate configuration for Pulp soc',
  formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("--template", dest="template", default=None, help="Specify the soc template")
parser.add_argument("--configs", dest="configs", default=None, help="Specify path to configurations")
parser.add_argument("--output", dest="output", default=None, help="Specify path to output configuration")

args = parser.parse_args()



if args.configs is None:
  print ('The path to the configurations must be given through option --configs')
  exit(-1)

if args.template is None:
  print ('The path to the template configuration must be given through option --template')
  exit(-1)


tp = js.import_config_from_file(args.template)



has_cluster       = tp.get('cluster') is not None
has_fc            = tp.get('soc/fc') is not None
has_udma          = tp.get('soc/peripherals/udma') is not None
has_gpio          = tp.get('soc/peripherals/gpio') is not None
has_soc_events    = tp.get('soc/peripherals/soc_eu') is not None
fc_events         = tp.get_child_str('soc/fc/irq')
l2_is_partitioned = tp.get_child_bool('soc/l2/is_partitioned')
has_fll           = tp.get('soc/peripherals/fll') is not None
has_rom           = tp.get('soc/rom') is not None
has_efuse         = tp.get('soc/peripherals/efuse') is not None
has_pmu           = tp.get('soc/peripherals/pmu') is not None


if fc_events is not None:
  fc_events_dict = { "includes": [ fc_events ] }
else:
  fc_events_dict = { }



if has_soc_events:
  soc_events_ids = { "includes": ["soc_events.json"] }
else:
  soc_events_ids = {}

soc = Component(
    nb_cluster=1 if has_cluster else 0,
    vp_class="pulp/soc",
    peripherals_base= tp.get_child_str("soc/peripherals/base"),
    soc_events_ids=soc_events_ids,
    fc_events=fc_events_dict
)

axi_ico_mappings = {
  "soc": get_mapping(tp.get_child_dict("soc"))
}

if has_cluster:
  axi_ico_mappings.update({
    "cluster": get_mapping(tp.get_child_dict("cluster"))
  })

soc.axi_ico = Component(
    includes=["../../ips/interco/router.json"],
    latency=9,
    mappings=axi_ico_mappings
)


soc.soc_ico = Component(
    nb_l2_shared_banks= tp.get_child_int("soc/l2/shared/nb_banks"),
    gv_class= "pulp.Soc_Ico_v2.Soc_Ico",
    vp_class=None
)

ll_ico_mappings = {
  "rom"           : get_mapping(tp.get_child_dict("soc/rom")),
  "apb"           : get_mapping(tp.get_child_dict("soc/peripherals"))
}

if has_cluster:
  ll_ico_mappings.update({
    "axi_master"    : get_mapping(tp.get_child_dict("cluster"))
  })

if l2_is_partitioned:
  ll_ico_mappings.update({
    "l2_priv0"      : get_mapping(tp.get_child_dict("soc/l2/priv0"), True),
    "l2_priv0_alias": get_mapping(tp.get_child_dict("soc/l2/priv0_alias")),
    "l2_priv1"      : get_mapping(tp.get_child_dict("soc/l2/priv1"), True),
    "l2_shared"     : get_mapping(tp.get_child_dict("soc/l2/shared")),
  })
else:
  ll_ico_mappings.update({
    "l2"         : get_mapping(tp.get_child_dict("soc/l2"), True),
  })

soc.soc_ico.ll_ico = Component(
  includes= [ "../../ips/interco/router.json" ],
  mappings= ll_ico_mappings
)

soc.soc_ico.hb_ico = Component(
  includes= [ "../../ips/interco/interleaver.json" ],
  nb_slaves= tp.get_child_int("soc/l2/shared/nb_banks") ,
  interleaving_bits= tp.get_child_int("soc/l2/shared/interleaving_bits"),
  remove_offset= tp.get_child_str("soc/l2/shared/base")
)

if has_fc:
  soc.soc_ico.fc_fetch_ico = Component(
    includes= [ "../../ips/interco/router.json" ],
    mappings= {
      "l2_shared": get_mapping(tp.get_child_dict("soc/l2/shared")),
      "ll_ico": {}
    }
  )

  soc.soc_ico.fc_data_ico = Component(
    includes= [ "../../ips/interco/router.json" ],
    mappings= {
      "l2_shared": get_mapping(tp.get_child_dict("soc/l2/shared")),
      "ll_ico": {}
    }
  )

if has_udma:
  soc.soc_ico.udma_rx_ico = Component(
    includes= [ "../../ips/interco/router.json" ],
    mappings= {
      "l2_shared": get_mapping(tp.get_child_dict("soc/l2/shared")),
      "ll_ico": {}
    }
  )

  soc.soc_ico.udma_tx_ico = Component(
    includes= [ "../../ips/interco/router.json" ],
    mappings= {
      "l2_shared": get_mapping(tp.get_child_dict("soc/l2/shared")),
      "ll_ico": {}
    }
  )

if has_pmu:
  soc.pmu = Component(
    includes=["pmu_v%d.json" % tp.get_child_str('soc/peripherals/pmu/version')]
  )

soc.soc_ico.debug                  = soc.soc_ico.ll_ico.input
soc.soc_ico.axi_slave              = soc.soc_ico.ll_ico.input
soc.soc_ico.hb_ico.out_0           = soc.soc_ico.l2_shared_0
soc.soc_ico.hb_ico.out_1           = soc.soc_ico.l2_shared_1
soc.soc_ico.hb_ico.out_2           = soc.soc_ico.l2_shared_2
soc.soc_ico.hb_ico.out_3           = soc.soc_ico.l2_shared_3

if has_fc:
  soc.soc_ico.fc_fetch               = soc.soc_ico.fc_fetch_ico.input
  soc.soc_ico.fc_data                = soc.soc_ico.fc_data_ico.input
  soc.soc_ico.fc_fetch_ico.l2_shared = soc.soc_ico.hb_ico.input
  soc.soc_ico.fc_fetch_ico.ll_ico    = soc.soc_ico.ll_ico.input
  soc.soc_ico.fc_data_ico.l2_shared  = soc.soc_ico.hb_ico.input
  soc.soc_ico.fc_data_ico.ll_ico     = soc.soc_ico.ll_ico.input

if has_udma:
  soc.soc_ico.udma_tx                = soc.soc_ico.udma_tx_ico.input
  soc.soc_ico.udma_rx_ico.l2_shared  = soc.soc_ico.hb_ico.input
  soc.soc_ico.udma_rx_ico.ll_ico     = soc.soc_ico.ll_ico.input
  soc.soc_ico.udma_tx_ico.l2_shared  = soc.soc_ico.hb_ico.input
  soc.soc_ico.udma_tx_ico.ll_ico     = soc.soc_ico.ll_ico.input
soc.soc_ico.ll_ico.apb             = soc.soc_ico.apb
if has_rom:
  soc.soc_ico.ll_ico.rom             = soc.soc_ico.apb

if l2_is_partitioned:
  soc.soc_ico.ll_ico.l2_priv0        = soc.soc_ico.l2_priv0
  soc.soc_ico.ll_ico.l2_priv0_alias  = soc.soc_ico.l2_priv0
  soc.soc_ico.ll_ico.l2_priv1        = soc.soc_ico.l2_priv1
  soc.soc_ico.ll_ico.l2_shared       = soc.soc_ico.hb_ico.input
else:
  soc.soc_ico.ll_ico.l2            = soc.soc_ico.l2

soc.soc_ico.ll_ico.axi_master      = soc.soc_ico.axi_master





apb_soc_mappings = {
  "stdout"       : get_mapping(tp.get_child_dict("soc/peripherals/stdout"), True),
  "apb_soc_ctrl" : get_mapping(tp.get_child_dict("soc/peripherals/apb_soc_ctrl"), True),
}

if has_soc_events:
  apb_soc_mappings.update({
    "soc_eu"       : get_mapping(tp.get_child_dict("soc/peripherals/soc_eu"), True),
  })

if has_gpio:
  apb_soc_mappings.update({
    "gpio"         : get_mapping(tp.get_child_dict("soc/peripherals/gpio"), True)
  })

if has_fll:
  apb_soc_mappings.update({
    "fll"          : get_mapping(tp.get_child_dict("soc/peripherals/fll"), True),
    "fll1"         : get_mapping(tp.get_child_dict("soc/peripherals/fll1"), True),
    "fll2"         : get_mapping(tp.get_child_dict("soc/peripherals/fll2"), True)
  })

if has_udma:
  apb_soc_mappings.update({
    "udma"         : get_mapping(tp.get_child_dict("soc/peripherals/udma"), True),
  })

if has_fc:
  apb_soc_mappings.update({
    "fc_itc"       : get_mapping(tp.get_child_dict("soc/peripherals/fc_itc"), True),
    "fc_debug"     : get_mapping(tp.get_child_dict("soc/peripherals/fc_dbg_unit"), True),
    "fc_timer"     : get_mapping(tp.get_child_dict("soc/peripherals/fc_timer"), True),
    "fc_dbg_unit"  : get_mapping(tp.get_child_dict("soc/peripherals/fc_dbg_unit"), True),
  })

if has_pmu:
  apb_soc_mappings.update({
    "pmu"       : get_mapping(tp.get_child_dict("soc/peripherals/pmu"), True),
  })

if has_rom:
  apb_soc_mappings.update({
    "rom"       : get_mapping(tp.get_child_dict("soc/rom"), True),
  })


soc.apb_ico = Component(
    includes= [ "../../ips/interco/router.json" ],
    mappings = apb_soc_mappings
)

if has_fc:
  soc.fc = Component(
      includes= [ "../../ips/%s.json" % tp.get_child_str('soc/fc/core') ],
      cluster_id=tp.get_child_int("soc/fc/cluster_id"),
      core_id=tp.get_child_int("soc/fc/core_id"),
      fetch_enable=tp.get_child_bool("soc/fc/fetch_enable"),
      boot_addr=tp.get_child_str("soc/fc/boot_addr")
  )


if l2_is_partitioned:

  soc.l2 = Component(
      is_partitioned= True,
      nb_shared_banks= tp.get_child_int("soc/l2/shared/nb_banks"),
      map_base= tp.get_child_str("soc/l2/base"),
      map_size= tp.get_child_str("soc/l2/size")
  )

  soc.l2_priv0 = Component(
      size= tp.get_child_int("soc/l2/priv0/size"),
      map_base= tp.get_child_str("soc/l2/priv0/base"),
      map_size= tp.get_child_str("soc/l2/priv0/size"),
      vp_class= "memory/memory"
  )

  soc.l2_priv1 = Component(
      size= tp.get_child_int("soc/l2/priv1/size"),
      map_base= tp.get_child_str("soc/l2/priv1/base"),
      map_size= tp.get_child_str("soc/l2/priv1/size"),
      vp_class= "memory/memory")

  soc.l2_shared = Component(
      nb_banks= tp.get_child_int("soc/l2/shared/nb_banks"),
      size= tp.get_child_int("soc/l2/shared/size"),
      map_base= tp.get_child_str("soc/l2/shared/base"),
      map_size= tp.get_child_str("soc/l2/shared/size")
  )

  l2_shared_size = tp.get_child_int("soc/l2/shared/size")
  l2_shared_nb_banks = tp.get_child_int("soc/l2/shared/nb_banks")
  for i in range(0, l2_shared_nb_banks):
    soc.add_component(
      'l2_shared_%d' % i,
      Component(
        size= int(l2_shared_size / l2_shared_nb_banks),
        vp_class= "memory/memory"
      )
    )

else:

  soc.l2 = Component(
      size= tp.get_child_int("soc/l2/size"),
      map_base= tp.get_child_str("soc/l2/base"),
      map_size= tp.get_child_str("soc/l2/size"),
      vp_class= "memory/memory"
  )

if has_fc:
  soc.fc_ico = Component(
      l2_alias=True
  )

if has_rom:
  soc.rom = Component(
      includes  = ["../../ips/rom_v%d.json" % tp.get_child_int("soc/rom/version")],
      size      = tp.get_child_int("soc/rom/size"),
      map_base= tp.get_child_str("soc/rom/base"),
      map_size= tp.get_child_str("soc/rom/size"),
      vp_class  = "memory/memory"
  )

soc.plt_loader = Component(
    includes=["../../tools/plt_loader/plt_loader.json"]
)

if has_fc:
  soc.fc_itc = Component(
      includes= ["../../ips/itc_v%d.json" % (tp.get_child_int("soc/peripherals/fc_itc/version"))]
  )

if has_fll:
  soc.fll = Component(
      includes= ["../../ips/fll_v%d.json" % (tp.get_child_int("soc/peripherals/fll/version"))]
  )

  soc.fll1 = Component(
      includes= ["../../ips/fll_v%d.json" % (tp.get_child_int("soc/peripherals/fll/version"))]
  )

  soc.fll2 = Component(
      includes= ["../../ips/fll_v%d.json" % (tp.get_child_int("soc/peripherals/fll/version"))]
  )

  soc.fll_ctrl = Component(
      version= tp.get_child_int("soc/peripherals/fll_ctrl/version"),
      vp_class= "pulp/fll/fll_ctrl",
      gv_class= "pulp.Fll_ctrl.fll_ctrl"
  )

soc.apb_soc_ctrl = Component(
    includes= ["apb_soc.json"]
)

soc.stdout = Component(
    includes= ["../../ips/stdout_v%d.json" % tp.get_child_int("soc/peripherals/stdout/version")]
)

if has_gpio:
  soc.gpio = Component(
    includes= ["../../ips/gpio_v%d.json" % tp.get_child_int("soc/peripherals/gpio/version")]
  )

if has_pmu:
  soc.pmu = Component(
      includes= ["../../ips/pmu_v%d.json" % tp.get_child_int("soc/peripherals/pmu/version")]
  )

if has_fc:
  soc.timer = Component(
      includes= ["../../ips/timer_v%d.json" % tp.get_child_int("soc/peripherals/fc_timer/version")]
  )

if has_soc_events:
  soc.soc_eu = Component(
      includes= ["../../ips/soc_eu_v%d.json" % tp.get_child_int("soc/peripherals/soc_eu/version")]
  )

if has_udma:
  soc.udma = Component(
      includes= ["udma.json"]
  )

if has_efuse:
  soc.efuse = Component(
      includes= ["../../ips/efuse_v%d.json" % tp.get_child_int("soc/peripherals/soc_eu/version")]
  )

soc.uart = Component(
    version= 1
)

if has_fc:
  soc.fc_debug = Component(
      version= tp.get_child_int("soc/peripherals/fc_dbg_unit/version")
  )

if has_cluster:
  soc.cluster = Component(
      includes=["../../ips/%s.json" %  tp.get_child_str("cluster/version")]
  )

soc.adv_dbg_unit = Component(
    includes=["../../ips/adv_dbg_unit/adv_dbg_unit.json"]
)

if has_cluster:
  soc.cluster_clock = soc.cluster.clock

# APB to peripherals bindings
soc.apb_ico.stdout = soc.stdout.input
if has_fll:
  soc.apb_ico.fll = soc.fll.input
  soc.apb_ico.fll1 = soc.fll1.input
  soc.apb_ico.fll2 = soc.fll2.input

if has_udma:
  soc.apb_ico.udma = soc.udma.input

if has_soc_events:
  soc.apb_ico.soc_eu = soc.soc_eu.input
  
soc.apb_ico.apb_soc_ctrl = soc.apb_soc_ctrl.input
if has_fc:
  soc.apb_ico.fc_itc = soc.fc_itc.input
  soc.apb_ico.fc_timer = soc.timer.input
  soc.apb_ico.fc_dbg_unit = soc.fc.dbg_unit

# Soc interco
soc.soc_ico.apb = soc.apb_ico.input
soc.soc_ico.axi_master = soc.axi_ico.input

if l2_is_partitioned:
  soc.soc_ico.l2_shared_0 = soc.l2_shared_0.input
  soc.soc_ico.l2_shared_1 = soc.l2_shared_1.input
  soc.soc_ico.l2_shared_2 = soc.l2_shared_2.input
  soc.soc_ico.l2_shared_3 = soc.l2_shared_3.input
  soc.soc_ico.l2_priv0 = soc.l2_priv0.input
  soc.soc_ico.l2_priv1 = soc.l2_priv1.input
else:
  soc.soc_ico.l2 = soc.l2.input

# ROM
if has_rom:
  soc.apb_ico.rom = soc.rom.input

# PMU
if has_pmu:
  soc.apb_ico.pmu = soc.pmu.input

# FC
if has_fc:
  soc.fc.fetch = soc.soc_ico.fc_fetch
  soc.fc.data = soc.soc_ico.fc_data
  soc.fc.irq_ack = soc.fc_itc.irq_ack

# AXI
if has_cluster:
  soc.axi_ico.cluster = soc.cluster.input
soc.axi_ico.soc = soc.soc_ico.axi_slave

# FC ITC
if has_fc:
  soc.fc_itc.irq_req = soc.fc.irq_req

# Cluster
if has_cluster:
  if has_fc:
    soc.cluster.dma_irq = soc.fc_itc.in_event_8
  soc.cluster.soc = soc.axi_ico.input

# Timer
if has_fc:
  soc.timer.irq_itf_0 = soc.fc_itc.in_event_10
  soc.timer.irq_itf_1 = soc.fc_itc.in_event_11

# UDMA
if has_udma:
  soc.udma.l2_itf = soc.soc_ico.udma_tx
  soc.udma.event_itf = soc.soc_eu.event_in
  soc.udma.spim0 = soc.spim0
  soc.udma.uart0 = soc.uart0

# Soc EU
if has_fc:
  soc.soc_eu.fc_event_itf = soc.fc_itc.soc_event

# Adv Dbg Unit
soc.adv_dbg_unit.io = soc.soc_ico.debug
soc.jtag = soc.adv_dbg_unit.jtag

# Loader
soc.plt_loader.out = soc.soc_ico.debug


if tp.get('soc/job_fifo') is not None:
    soc.job_fifo = Component(
        includes= ["job_fifo.json"]
    )
    soc.job_fifo_injector = Component(
        includes= ["../../tools/vp/injector.json"]
    )

    soc.host_injector = Component(
        includes= ["../../tools/vp/injector.json"]
    )

    soc.apb_ico.get_property('mappings')["job_fifo"] = { "base": "0x1A120000", "size": "0x00001000", "remove_offset": "0x1A120000" }
    soc.apb_ico.job_fifo = soc.job_fifo.input
    soc.job_fifo_injector.output = soc.job_fifo.fifo

    soc.axi_ico.get_property('mappings')["ext"] = {
      "base": "0x1000000000000", "size": "0x1000000000000", "remove_offset": "0x1000000000000"
    }
    soc.axi_ico.ext = soc.host_injector.input


config = soc.get_json_config(configs=args.configs)

if args.output is not None:
  with open(args.output, 'w') as file:
    file.write(config)
    file.write('\n')
